#!/usr/bin/perl -w
# PPath@Cornell
# Surya Saha Feb 25, 2011

use strict;
use warnings;
use Getopt::Long;
eval {
	require Bio::SearchIO;
};
use Bio::SearchIO; 

=head1 NAME

 Blast2HitGFF3.pl - Create GFF file of blast hits from Blast text report  

=head1 SYNOPSIS

  % Blast2HitGFF3.pl --report blast.out --cutoff <1.0>
  
=head1 DESCRIPTION

 Reads in BLAST report file. Should work for any type of Blast. CHECK!! 
  
=head1 COMMAND-LINE OPTIONS

 Command-line options can be abbreviated to single-letter options, e.g. -f instead of --file. Some options
are mandatory (see below).

   --report  <.out>    Blast report in text format (required)
   --cutoff  <1.0>     A float value <1.0> 
   --source  <>        Source of seqs in hit blast database (RefSeq,Genbank)
   --out     <.gff>    GFF3 output filename

=head1 AUTHOR

 Surya Saha, ss2489@cornell.edu

=cut


my ($rep,$cutoff,$src,$out,$flag,$in,@temp,$result,$hit,$hsp,$i,$j);

GetOptions (
	'report=s' => \$rep,
	'cutoff:f' => \$cutoff,
	'source:s' => \$src,
	'out:s'    => \$out) or (system('pod2text',$0), exit 1);

# defaults and checks
defined($rep) or (system('pod2text',$0), exit 1);
if (!(-e $rep)){print STDERR "$rep not found: $!\n"; exit 1;}
$cutoff ||=1.0;
$src ||= 'RefSeq';
$out ||= "$rep\.gff";

print STDERR "Using E value cutoff of $cutoff ...\nSource as $src ...\n";

$in = new Bio::SearchIO(-format => 'blast', -file   => $rep);

#NC_012985.2	RefSeq	source	1	1226704	.	+	.	organism=Candidatus Liberibacter asiaticus str. psy62;mol_type=genomic DNA;strain=psy62;db_xref=taxon:537021
#NC_012985.2	RefSeq	gene	36	407	.	+	.	locus_tag=CLIBASIA_00005;db_xref=GeneID:8210255
#NC_012985.2	RefSeq	CDS	36	404	.	+	0	locus_tag=CLIBASIA_00005;transl_table=11;product=hypothetical protein;protein_id=YP_003064535.1;db_xref=GI:254780122;db_xref=GeneID:8210255;exon_number=1

$flag=0;
my $counter=1;
my ($name,$desc, $GFF);
while($result = $in->next_result) {
	## $result is a Bio::Search::Result::ResultI compliant object
	if($result->no_hits_found()){next;}
	
	#get hit data
	if($result->num_hits>0){
		if($flag==0){
			unless( open $GFF, '>', "$out" ){print "not able to open $out\n\n";exit 1;}
			print $GFF "\#\#gff-version 3\n\#\#Generated by Blast2HitGFF3.pl\n\#\#Algorithm: ",
				$result->algorithm," Version: ",$result->algorithm_version,"\n";
			print $GFF "\#\#DB name: ",$result->database_name," Sequences: ",$result->database_entries,
				" Size: ",$result->database_letters,"\n";
			$flag=1;
		}
#		@temp=split(/\|/,$result->query_name);
#		print XLS "\nQuery\t",$result->query_name,"\nDesc\t",$result->query_description,"\n";

		$name = $result->query_name ? $result->query_name : 'No name';
		$name =~ s/;/ /g; #to remove GFF3 notes separator if present
		$desc = $result->query_description ? $result->query_description : 'No description';
		$desc =~ s/;/ /g; #to remove GFF3 notes separator if present
		
		while($hit = $result->next_hit ) {
	    	## $hit is a Bio::Search::Hit::HitI compliant object
	    	if ($hit->significance < $cutoff){
#	    		@temp=split(/\|/,$hit->name);
#	    		print XLS "\t",$hit->significance,"\t",$hit->bits,"\t",$temp[2],"\t",$hit->description,"\n"
				while($hsp = $hit->next_hsp()){
					## $hsp is a Bio::Search::HSP::HSPI object
					print $GFF $hit->name,"\t$src\tmatch_part\t",$hsp->start('hit'),"\t",$hsp->end('hit'),"\t",
						$hsp->bits(),"\t";
					if($hsp->strand('hit') == -1){print $GFF '-';}
					elsif($hsp->strand('hit') == 1){print $GFF '+';}
					if ( $name ne 'No name' && $desc ne 'No description' ){
						print $GFF "\t.\tID=",$counter,";Name=",$name,";Note=$desc Percent_identity ",sprintf("%.2f",$hsp->percent_identity),' Evalue ',
						$hsp->evalue(),' Length ',$hsp->length(),"\n";
					}
					elsif ( $name eq 'No name' && $desc ne 'No description' ){
						print $GFF "\t.\tID=",$counter,";Name=",$desc,";Note=Percent_identity ",sprintf("%.2f",$hsp->percent_identity),' Evalue ',
						$hsp->evalue(),' Length ',$hsp->length(),"\n";
					}
					elsif ( $name eq 'No name' && $desc eq 'No description' ){
						print $GFF "\t.\tID=",$counter,";Name=NA;Note=Percent_identity ",sprintf("%.2f",$hsp->percent_identity),' Evalue ',
						$hsp->evalue(),' Length ',$hsp->length(),"\n";
					}
					else{
						print STDERR "This should not happen\n\n"; exit 1;
					}
					
					$counter++;
				}
	    	}
	    }
	}
	$i=$result;
}

@temp=$i->available_parameters();
print $GFF "\#\#Parameters\n\#\#";
foreach my $j (@temp){print $GFF $j,': ',$i->get_parameter($j),' ';} print $GFF "\n";
@temp=$i->available_statistics();
print $GFF "\#\#Statistics\n\#\#";
foreach my $j (@temp){print $GFF $j,': ',$i->get_statistic($j),' ';} print $GFF "\n";

if($flag==0){print STDERR "\n\nNo hits found!!\n";}
else{close($GFF);}
exit;

